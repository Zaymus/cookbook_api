openapi: 3.0.0
info:
  version: 1.1.0
  title: cookbook_api
  description: "A cookbook api used for a future app"
paths:
  /recipe:
    post:
      description: Create new recipe
      requestBody:
        $ref: "#/components/requestBodies/createRecipe"
      responses:
        "200":
          $ref: "#/components/responses/postRecipe"
        "400":
          $ref: "#/components/responses/CRUDError"
    patch:
      description: updates recipe data by id
      requestBody:
        $ref: "#/components/requestBodies/updateRecipe"
      responses:
        "200":
          $ref: "#/components/responses/patchRecipe"
        "400":
          $ref: "#/components/responses/CRUDError"

  /recipe{recipeName}:
    get:
      description: Returns an array of recipes by name
      parameters:
        - in: path
          name: recipeName
          schema:
            type: string
          required: true
          description: name of the recipe to be searched
          example: "test name"
      responses:
        "200":
          $ref: "#/components/responses/getRecipeByName"
        "400":
          $ref: "#/components/responses/CRUDError"

  /recipe/{recipeId}:
    get:
      description: Returns the recipe by id
      parameters:
        - in: path
          name: recipeId
          schema:
            type: string
          required: true
          description: id of the recipe to be searched
          example: "630c1668e2b62e561e954087"
      responses:
        "200":
          $ref: "#/components/responses/getRecipeById"
        "400":
          $ref: "#/components/responses/CRUDError"

  /recipe{recipeId}:
    put:
      description: deletes the recipe with the given id
      parameters:
        - in: path
          name: recipeId
          schema:
            type: string
          required: true
          description: id of the recipe to be deleted
          example: "63125749010e6b0219ece378"
      responses:
        "200":
          $ref: "#/components/responses/putRecipe"
        "400":
          $ref: "#/components/responses/CRUDError"

  /user:
    post:
      description: Create a new user
      requestBody:
        $ref: "#/components/requestBodies/createUser"
      responses:
        "200":
          $ref: "#/components/responses/postUser"
        "400":
          $ref: "#/components/responses/CRUDError"

    patch:
      description: updates user data by id
      requestBody:
        $ref: "#/components/requestBodies/updateUser"
      responses:
        "200":
          $ref: "#/components/responses/patchUser"
        "400":
          $ref: "#/components/responses/CRUDError"

  /user{email}:
    get:
      description: Returns a user with the given email
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: email of the user to be searched
          example: "testDelete@test.com"
      responses:
        "200":
          $ref: "#/components/responses/getUserByEmail"
        "400":
          $ref: "#/components/responses/CRUDError"

  /user/{userId}:
    get:
      description: Returns the user by id
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: id of the user to be searched
          example: "630c1668e2b62e561e954087"
      responses:
        "200":
          $ref: "#/components/responses/getUserById"
        "400":
          $ref: "#/components/responses/CRUDError"

  /user{userId}:
    put:
      description: deletes the user with the given id
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: id of the user to be deleted
          example: "63125749010e6b0219ece378"
      responses:
        "200":
          $ref: "#/components/responses/putUser"
        "400":
          $ref: "#/components/responses/CRUDError"
  /user/{userId}/recipes:
    get:
      description: retrieves all the recipes that the user has
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: id of the user to retrieve recipes from
          example: "630ea999f113a432c7007993"
      responses:
        "200":
          $ref: "#/components/responses/getUserRecipes"
        "400":
          $ref: "#/components/responses/CRUDError"

  /user/{userId}/myCookbook:
    get:
      description: retrieves all the users recipes and the recipes
        they have been given via the share functionality
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: id of the user to source the recipes from
          example: "630ea999f113a432c7007993"
      responses:
        "200":
          $ref: "#/components/responses/getCookbook"
        "400":
          $ref: "#/components/responses/CRUDError"

  /user/addRecipe:
    post:
      description: add recipe to user recipe list
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: id of the user to update the recipe list
          example: "630ea999f113a432c7007993"
        - in: query
          name: recipeId
          schema:
            type: string
          required: true
          description: id of the recipe to be added to the users recipe list
          example: "630c1668e2b62e561e954087"
      responses:
        "200":
          $ref: "#/components/responses/postAddRecipeToUser"
        "400":
          $ref: "#/components/responses/CRUDError"

  /user/removeRecipe:
    post:
      description: remove recipe from user recipe list
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: id of the user to update the recipe list
          example: "630ea999f113a432c7007993"
        - in: query
          name: recipeId
          schema:
            type: string
          required: true
          description: id of the recipe to be removed from the users recipe list
          example: "630c1668e2b62e561e954087"
      responses:
        "200":
          $ref: "#/components/responses/postRemoveRecipeFromUser"
        "400":
          $ref: "#/components/responses/CRUDError"
  /macros:
    get:
      description: Retrieve macronutrients of food item sent in request query
      parameters:
        - in: query
          name: foodItem
          schema:
            type: string
          required: true
          description: Food item data to get macro information for
          example: '{"ingredient": "Chicken Breast", "amount": "4", "unit": "oz"}'
      responses:
        "200":
          $ref: "#/components/responses/getMacros"
        "400":
          $ref: "#/components/responses/getMacrosError"

  /recipe/healthInfo:
    get:
      description: Retrieve total health info for all ingredients in the recipe per serving
      parameters:
        - in: query
          name: recipeId
          schema:
            type: string
          required: true
          description: Id of the recipe to get health info from
          example: "630c1668e2b62e561e954087"
      responses:
        "200":
          $ref: "#/components/responses/getHealthInfo"
        "400":
          $ref: "#/components/responses/getHealthInfoError"

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Zaymus/cookbook/1.1.0
components:
  requestBodies:
    createRecipe:
      description: request body for a recipe to be created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/createRecipe"
          example:
            name: test name 2
            numServings: 4
            steps:
              - step 1
              - step 2
              - step 3
              - step 4
            imageUrl: https://www.thisistheimageurl.com/image1
            owner: 63125674010e6b0219ece372
            visibility: Private
            ingredients:
              - ingredient: Chicken
                amount: 4
                unit: oz
            users:
              - "630ea999f113a432c7007993"
            tags:
              - chicken

    updateRecipe:
      description: request body to update a recipe
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/updateRecipe"

    createUser:
      description: request body to create a user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/createUser"

    updateUser:
      description: request body to update a user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/updateUser"

  responses:
    CRUDError:
      description: default error response for CRUD Operations
      content:
        application/json:
          example:
            isSuccessful: false
            wasFound: false
            wasUpdated: false
            wasDeleted: false
            status: "CRUD Error"

    postRecipe:
      description: Successful response for recipe creation
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: false
            wasUpdated: false
            wasDeleted: false
            status: "Saved"

    getRecipeByName:
      description: successful response for recipe retrieval by name
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: false
            status: Retrieved
            recipe:
              - users: []
                _id: 630fd1c6927570d2dd476403
                name: test name
                numServings: 4
                steps:
                  - step 1
                  - step 2
                  - step 3
                  - step 4
                imageUrl: https://www.thisistheimageurl.com/image1
                owner: 630ea999f113a432c7007993
                visibility: Public
                tags: []
                ingredients: []
                __v: 0

    getRecipeById:
      description: successful response for recipe retrieval by id
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: false
            status: Retrieved
            recipe:
              _id: 630c1668e2b62e561e954087
              name: updated test name
              numServings: 4
              steps:
                - updated steps
              imageUrl: new image url
              __v: 1
              owner: 630ea999f113a432c7007993
              ingredients:
                - ingredient: Chicken
                  amount: 4
                  unit: oz
                  _id: 631256f3010e6b0219ece374
              users:
                - 63125674010e6b0219ece372
              visibility: Private
              tags: []

    patchRecipe:
      description: successful response for updating a recipe
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: true
            wasDeleted: false
            status: Updated

    putRecipe:
      description: successful response for deleting a recipe
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: true
            status: Deleted

    postUser:
      description: successful response for creating a user
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: false
            wasUpdated: false
            wasDeleted: false
            status: Saved

    getUserByEmail:
      description: successful response for retrieving a user by email
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: false
            status: Retrieved
            user:
              name:
                prefix: Mr.
                firstName: John
                middleName: A.
                lastName: Doe
              _id: 6318c2297d9013c367093dc6
              email: testDelete@test.com
              password: $2a$12$LG5i0Dv3C8.gw5hp1CXt6ukuwv/QOVZkWzSHbRYLO9mfSJGJBUs4S
              recipes: []
              __v: 0

    getUserById:
      description: successful response for retrieving a user by id
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: false
            status: Retrieved
            user:
              name:
                prefix: Mr.
                firstName: John
                middleName: A.
                lastName: Doe
              _id: 630ea999f113a432c7007993
              email: updatedTest@test.com
              password: $2a$12$FiHf.9qnrhfHPt6gMifNeOE0K4FDt5O0rqzy13HCUDexSUg6DXgkS
              recipes: []
              __v: 0

    patchUser:
      description: successful response for updating a user
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: true
            wasDeleted: false
            status: Updated

    putUser:
      description: successful; response for deleting a user
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: true
            status: Deleted

    getUserRecipes:
      description: successful response for retrieving user recipes
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: false
            status: Retrieved
            recipes:
              - _id: 630c1668e2b62e561e954087
                name: updated test name
                numServings: 4
                steps:
                  - updated steps
                imageUrl: new image url
                __v: 1
                owner: 630ea999f113a432c7007993
                ingredients:
                  - ingredient: Chicken
                    amount: 4
                    unit: oz
                    _id: 631256f3010e6b0219ece374
                users:
                  - 63125674010e6b0219ece372
                visibility: Private
                tags: []

    getCookbook:
      description: successful response for retrieving user cookbook
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: false
            status: Retrieved
            recipes:
              - _id: 630c1668e2b62e561e954087
                name: updated test name
                numServings: 4
                steps:
                  - updated steps
                imageUrl: new image url
                __v: 1
                owner: 630ea999f113a432c7007993
                ingredients:
                  - ingredient: Chicken
                    amount: 4
                    unit: oz
                    _id: 631256f3010e6b0219ece374
                users:
                  - 63125674010e6b0219ece372
                visibility: Private
                tags: []
              - _id: 6313803713202acc83833a79
                name: test name 2
                numServings: 4
                ingredients:
                  - ingredient: Chicken
                    amount: 4
                    unit: oz
                    _id: 6313803713202acc83833a7a
                steps:
                  - step 1
                  - step 2
                  - step 3
                  - step 4
                imageUrl: https://www.thisistheimageurl.com/image1
                tags:
                  - chicken
                owner: 63125674010e6b0219ece372
                users:
                  - 630ea999f113a432c7007993
                visibility: Shared
                __v: 0

    postAddRecipeToUser:
      description: successful response for adding a recipe to user recipe list
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: true
            wasDeleted: false
            status: Updated

    postRemoveRecipeFromUser:
      description: successful response for removal of recipe from user recipe list
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: true
            status: Updated

    getMacrosError:
      description: error response for failing to get macro nutrients of an an unknown food
      content:
        application/json:
          example:
            isSuccessful: false
            wasFound: false
            wasUpdated: false
            wasDeleted: false
            status: API Error
            err:
              message: Request failed with status code 404
              name: AxiosError
              config:
                transitional:
                  silentJSONParsing: true
                  forcedJSONParsing: true
                  clarifyTimeoutError: false
                transformRequest:
                  - null
                transformResponse:
                  - null
                timeout: 0
                xsrfCookieName: XSRF-TOKEN
                xsrfHeaderName: X-XSRF-TOKEN
                maxContentLength: -1
                maxBodyLength: -1
                env: {}
                headers:
                  Accept: application/json, text/plain, */*
                  Content-Type: application/json
                  x-app-id: 15fe543b
                  x-app-key: 672ebb4e299069b677de3628b1c963e7
                  x-remote-user-id: "0"
                  User-Agent: axios/0.27.2
                  Content-Length: 20
                method: post
                url: https://trackapi.nutritionix.com/v2/natural/nutrients
                data: '{"query":"dfnjsnfo"}'
              code: ERR_BAD_REQUEST
              status: 404

    getMacros:
      description: successful retrieval of macronutrient breakdown from food item
      content:
        application/json:
          example:
            isSuccessful: true
            wasFound: true
            wasUpdated: false
            wasDeleted: false
            status: Retrieved
            calories: 187
            carbs:
              total: 0
              percentage: 0
            fat:
              total: 4
              percentage: 20.45
            protein:
              total: 35
              percentage: 79.55

    getHealthInfo:
      description: successful retrieval of recipe health info
      content:
        application/json:
          example:
            isSuccessful: true,
            wasFound: true,
            wasUpdated: false,
            wasDeleted: false,
            status: Retrieved,
            macroData:
              carbs:
                total: 28.5,
                percentage: 66.18
              fat:
                total: 1.25,
                percentage: 6.53
              protein":
                total: 11.75,
                percentage: 27.29
              calories: 179

    getHealthInfoError:
      description: Error retrieving health info with bad recipe id
      content:
        application/json:
          example:
            isSuccessful: false
            wasFound: false
            wasUpdated: false
            wasDeleted: false
            status: CRUD Error
            err:
              message: Request failed with status code 400
              name: AxiosError
              config:
                transitional:
                  silentJSONParsing: true
                  forcedJSONParsing: true
                  clarifyTimeoutError: false
                transformRequest:
                  - null
                transformResponse:
                  - null
                timeout: 0
                xsrfCookieName: XSRF-TOKEN
                xsrfHeaderName: X-XSRF-TOKEN
                maxContentLength: -1
                maxBodyLength: -1
                env: {}
                headers:
                  Accept: application/json, text/plain, */*
                  User-Agent: axios/0.27.2
                method: get
                url: http://localhost:9001/api/recipe/630c1668e2b62e561e952652
              code: ERR_BAD_REQUEST
              status: 400

  schemas:
    createRecipe:
      required:
        - name
        - numServings
        - steps
        - imageUrl
        - owner
        - visibility
        - ingredients
      properties:
        name:
          type: string
          example: "test name"
        numServings:
          type: number
          example: 4
        steps:
          type: array
          items:
            type: string
          example:
            - step 1
            - step 2
            - step 3
            - step 4
        imageUrl:
          type: string
          example: "https://www.thisistheimageurl.com/image1"
        owner:
          type: string
          example: "630ea999f113a432c7007993"
        visibility:
          type: string
          example: "Private"
        ingredients:
          type: array
          items:
            type: object
            properties:
              ingredient:
                type: string
                example: "Chicken"
              amount:
                type: number
                example: 4
              unit:
                type: string
                example: "oz"
        users:
          type: array
          items:
            type: string
            example: "63125674010e6b0219ece372"
        tags:
          type: array
          items:
            type: string
            example: "chicken"

    updateRecipe:
      properties:
        id:
          type: string
          example: "630c1668e2b62e561e954087"
        name:
          type: string
          example: "updated test name"
        numServings:
          type: number
          example: 4
        steps:
          type: array
          items:
            type: string
          example: ["updated steps"]
        imageUrl:
          type: string
          example: "new image url"
        owner:
          type: string
          example: "630ea999f113a432c7007993"

    createUser:
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          example: "testDelete@test.com"
        name:
          type: object
          properties:
            prefix:
              type: string
              example: "Mr."
            firstName:
              type: string
              example: "John"
            middleName:
              type: string
              example: ""
            lastName:
              type: string
              example: "Doe"
            suffix:
              type: string
              example: ""
        password:
          type: string
          example: "Abc12345!"
        recipes:
          type: array
          items:
            type: string
            example: "630c1668e2b62e561e954087"

    updateUser:
      properties:
        id:
          type: string
          example: "630ea999f113a432c7007993"
        email:
          type: string
          example: "updatedTest@test.com"
        name:
          type: object
          properties:
            prefix:
              type: string
              example: "Ms."
            firstName:
              type: string
              example: "Jane"
            middleName:
              type: string
              example: "A."
            lastName:
              type: string
              example: "Doe"
            suffix:
              type: string
              example: "Jr."
        recipes:
          type: array
          items:
            type: string
            example: "630fd1c6927570d2dd476403"
        password:
          type: string
          example: "Abc12345!"