{
	"info": {
		"_postman_id": "c368bca1-a9ab-489a-86a4-6276f5d67a84",
		"name": "Cookbook",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23053875"
	},
	"item": [
		{
			"name": "Nutrionix_api_calls",
			"item": [
				{
					"name": "getSearchFood",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-app-id",
								"value": "15fe543b",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "672ebb4e299069b677de3628b1c963e7",
								"type": "text"
							},
							{
								"key": "x-remote-user-id",
								"value": "0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nutritionix_url}}/v2/search/instant?query=chicken&detailed=true",
							"host": [
								"{{nutritionix_url}}"
							],
							"path": [
								"v2",
								"search",
								"instant"
							],
							"query": [
								{
									"key": "query",
									"value": "chicken"
								},
								{
									"key": "detailed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getNutritionInfo",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-app-id",
								"value": "15fe543b",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "672ebb4e299069b677de3628b1c963e7",
								"type": "text"
							},
							{
								"key": "x-remote-user-id",
								"value": "0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"chicken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nutritionix_url}}/v2/natural/nutrients",
							"host": [
								"{{nutritionix_url}}"
							],
							"path": [
								"v2",
								"natural",
								"nutrients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Server status is up\", () => {\r",
							"        pm.expect(jsonData.status).to.equal(\"up\");\r",
							"    });\r",
							"    pm.test(\"Server responded in under 100ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(100);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/health",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "newRecipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Creation was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Server responded in under 1000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(1000);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"test name\",\r\n    \"numServings\": 4,\r\n    \"steps\": [\"step 1\", \"step 2\", \"step 3\", \"step 4\"],\r\n    \"imageUrl\": \"https://www.thisistheimageurl.com/image1\",\r\n    \"owner\": \"63125674010e6b0219ece372\",\r\n    \"visibility\": \"Private\",\r\n    \"ingredients\": [\r\n        {\r\n            \"ingredient\": \"Chicken\",\r\n            \"amount\": 4,\r\n            \"unit\": \"oz\"\r\n        }\r\n    ],\r\n    \"users\": [\"{{user_id}}\"],\r\n    \"tags\": [\"chicken\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{cookbook_url}}/api/recipe",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"recipe"
					]
				}
			},
			"response": []
		},
		{
			"name": "fetchRecipes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Retrieval was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"\r",
							"    pm.test(\"Recipe was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    \r",
							"    pm.test(\"Recipes were retrieved\", () => {\r",
							"        pm.expect(jsonData.recipe).to.be.an(\"array\").that.is.not.empty;\r",
							"    });\r",
							"\r",
							"    if(pm.expect(jsonData.recipe).to.be.an(\"array\").that.is.not.empty) {\r",
							"        pm.globals.set(\"new_recipe_id\", jsonData.recipe.at(-1)._id);\r",
							"    }\r",
							"\r",
							"    pm.test(\"Server responded in under 5000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(5000);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{cookbook_url}}/api/recipe?name=test name",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"recipe"
					],
					"query": [
						{
							"key": "name",
							"value": "test name"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fetchRecipeById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var requestData = pm.request.body;\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Retrieval was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Recipe was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Only one recipe retrieved\", () => {\r",
							"        pm.expect(jsonData.recipe).to.be.an(\"object\");\r",
							"    });\r",
							"    if (Array.isArray(jsonData.recipe) == false)\r",
							"    {\r",
							"        pm.test(\"Retrieved recipe id matches route\", () => {\r",
							"            pm.expect(jsonData.recipe.id).to.be.equal(pm.request.toJSON().url[2]);\r",
							"        });\r",
							"        pm.test(\"Server responded in under 500ms\", () => {\r",
							"            pm.expect(pm.response.responseTime).below(500);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/recipe/:recipeId",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"recipe",
						":recipeId"
					],
					"variable": [
						{
							"key": "recipeId",
							"value": "{{recipe_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updateRecipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200) {\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Recipe was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Recipe was updated\", () => {\r",
							"        pm.expect(jsonData.wasUpdated).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Server responded in under 1000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(1000);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{recipe_id}}\",\r\n    \"name\": \"updated test name\",\r\n    \"numServings\": 4,\r\n    \"steps\": \"updated steps\",\r\n    \"imageUrl\": \"new image url\",\r\n    \"ingredients\": [\r\n        {\r\n            \"ingredient\": \"Chicken Breast\",\r\n            \"amount\": 4,\r\n            \"unit\": \"oz\"\r\n        },\r\n        {\r\n            \"ingredient\": \"Rice\",\r\n            \"amount\": 2.5,\r\n            \"unit\": \"oz\"\r\n        },\r\n        {\r\n            \"ingredient\": \"Broccoli\",\r\n            \"amount\": 1.5,\r\n            \"unit\": \"oz\"\r\n        }\r\n    ],\r\n    \"owner\": \"{{user_id}}\",\r\n    \"visibility\": \"Public\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{cookbook_url}}/api/recipe",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"recipe"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteRecipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    if(jsonData.status != \"Deleted\")\r",
							"    {\r",
							"        pm.test(\"No recipe found status\", () => {\r",
							"            pm.expect(jsonData.status).to.equal(\"No record to delete\");\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        pm.test(\"Recipe was found\", () => {\r",
							"            pm.expect(jsonData.wasFound).to.be.true;\r",
							"        });\r",
							"        pm.test(\"Recipe was deleted or does not exist\", () => {\r",
							"            pm.expect(jsonData.wasDeleted).to.be.true;\r",
							"        });\r",
							"    }\r",
							"    pm.test(\"Server responded in under 500ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(500);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{cookbook_url}}/api/recipe?id={{new_recipe_id}}",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"recipe"
					],
					"query": [
						{
							"key": "id",
							"value": "{{new_recipe_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "newUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Creation was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"\r",
							"    pm.test(\"Server responded in under 1000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(1000);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"testDelete@test.com\",\r\n    \"name\": {\r\n        \"prefix\": \"Mr.\",\r\n        \"firstName\": \"Victor\",\r\n        \"middleName\": \"Carson\",\r\n        \"lastName\": \"Brown\"\r\n    },\r\n    \"password\": \"Abc12345!\",\r\n    \"recipes\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{cookbook_url}}/api/user",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "fetchUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Retrieval was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was retrieved\", () => {\r",
							"        pm.expect(jsonData.user).to.be.an(\"object\").that.is.not.empty;\r",
							"    });\r",
							"\r",
							"    if(pm.expect(jsonData.user).to.be.an(\"object\").that.is.not.empty) {\r",
							"        pm.globals.set(\"new_user_id\", jsonData.user._id);\r",
							"    }\r",
							"    pm.test(\"Server responded in under 5000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(5000);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{cookbook_url}}/api/user?email=testDelete@test.com",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user"
					],
					"query": [
						{
							"key": "email",
							"value": "testDelete@test.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fetchUserById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Retrieval was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Only one recipe retrieved\", () => {\r",
							"        pm.expect(jsonData.user).to.be.an(\"object\");\r",
							"    });\r",
							"    pm.test(\"Server responded in under 500ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(500);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/user/:userId",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200) {\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was updated\", () => {\r",
							"        pm.expect(jsonData.wasUpdated).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Server responded in under 1000ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(1000);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{user_id}}\",\r\n    \"email\": \"updatedTest@test.com\",\r\n    \"name\": {\r\n        \"prefix\": \"Mr.\",\r\n        \"firstName\": \"Victor\",\r\n        \"middleName\": \"Carson\",\r\n        \"lastName\": \"Brown\"\r\n    },\r\n    \"recipes\": \"630fd1c6927570d2dd476403\",\r\n    \"password\": \"Abc12345!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{cookbook_url}}/api/user",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"\r",
							"    pm.test(\"User was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    if(jsonData.status != \"Deleted\")\r",
							"    {\r",
							"        pm.test(\"Correct user not found status\", () => {\r",
							"            pm.expect(jsonData.status).to.equal(\"No record to delete\");\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        pm.test(\"User was deleted\", () => {\r",
							"            pm.expect(jsonData.wasDeleted).to.be.true;\r",
							"        });\r",
							"    }\r",
							"    pm.test(\"Server responded in under 500ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).below(500);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{cookbook_url}}/api/user?id={{new_user_id}}",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user"
					],
					"query": [
						{
							"key": "id",
							"value": "{{new_user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fetchUserRecipes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"   });\r",
							"    pm.test(\"Recipes were retrieved\", () => {\r",
							"        pm.expect(jsonData.status).to.equal(\"Retrieved\");\r",
							"    });\r",
							"    pm.test(\"Recipes property is an array\", () => {\r",
							"        pm.expect(jsonData.recipes).to.be.an(\"array\");\r",
							"    });\r",
							"    pm.test(\"Recipes have data\", () => {\r",
							"        pm.expect(jsonData.recipes.length).to.be.greaterThan(0);\r",
							"    });\r",
							"}\r",
							"pm.test(\"Server responded in under 500ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/user/:userId/recipes",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user",
						":userId",
						"recipes"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getCookbook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"   });\r",
							"    pm.test(\"Recipes were retrieved\", () => {\r",
							"        pm.expect(jsonData.status).to.equal(\"Retrieved\");\r",
							"    });\r",
							"    pm.test(\"Recipes property is an array\", () => {\r",
							"        pm.expect(jsonData.recipes).to.be.an(\"array\");\r",
							"    });\r",
							"    pm.test(\"Recipes have data\", () => {\r",
							"        pm.expect(jsonData.recipes.length).to.be.greaterThan(0);\r",
							"    });\r",
							"}\r",
							"pm.test(\"Server responded in under 5000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).below(5000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/user/:userId/myCookbook",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user",
						":userId",
						"myCookbook"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "postAddRecipeToUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Recipe list was updated\", () => {\r",
							"        pm.expect(jsonData.wasUpdated).to.be.true;\r",
							"    });\r",
							"}\r",
							"pm.test(\"Server responded in under 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/user/addRecipe?userId={{user_id}}&recipeId={{recipe_id}}",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user",
						"addRecipe"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{user_id}}"
						},
						{
							"key": "recipeId",
							"value": "{{recipe_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "postRemoveRecipeFromUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"User was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Recipe was deleted from recipe list\", () => {\r",
							"        pm.expect(jsonData.wasDeleted).to.be.true;\r",
							"    });\r",
							"}\r",
							"pm.test(\"Server responded in under 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/user/removeRecipe?userId={{user_id}}&recipeId={{recipe_id}}",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"user",
						"removeRecipe"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{user_id}}"
						},
						{
							"key": "recipeId",
							"value": "{{recipe_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getMacros",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Food item was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Carbs total retrieved\", () => {\r",
							"        pm.expect(jsonData.carbs.total).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Carbs percentage retrieved\", () => {\r",
							"        pm.expect(jsonData.carbs.percentage).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Fat total retrieved\", () => {\r",
							"        pm.expect(jsonData.fat.total).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Fat percentage retrieved\", () => {\r",
							"        pm.expect(jsonData.fat.percentage).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"     pm.test(\"Protein total retrieved\", () => {\r",
							"        pm.expect(jsonData.protein.total).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Protein percentage retrieved\", () => {\r",
							"        pm.expect(jsonData.protein.percentage).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"}\r",
							"pm.test(\"Server responded in under 500ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/macros?foodItem={\"ingredient\": \"Chicken Breast\", \"amount\": \"4\", \"unit\": \"oz\"}&devmode=true",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"macros"
					],
					"query": [
						{
							"key": "foodItem",
							"value": "{\"ingredient\": \"Chicken Breast\", \"amount\": \"4\", \"unit\": \"oz\"}"
						},
						{
							"key": "devmode",
							"value": "true"
						},
						{
							"key": "foodItem",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getRecipeHealthinfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.code == 200)\r",
							"{\r",
							"    pm.test(\"Request was successful\", () => {\r",
							"        pm.expect(jsonData.isSuccessful).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Food item was found\", () => {\r",
							"        pm.expect(jsonData.wasFound).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Carbs total retrieved\", () => {\r",
							"        pm.expect(jsonData.macroData.carbs.total).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Carbs percentage retrieved\", () => {\r",
							"        pm.expect(jsonData.macroData.carbs.percentage).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Fat total retrieved\", () => {\r",
							"        pm.expect(jsonData.macroData.fat.total).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Fat percentage retrieved\", () => {\r",
							"        pm.expect(jsonData.macroData.fat.percentage).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"     pm.test(\"Protein total retrieved\", () => {\r",
							"        pm.expect(jsonData.macroData.protein.total).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Protein percentage retrieved\", () => {\r",
							"        pm.expect(jsonData.macroData.protein.percentage).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"    pm.test(\"Calories retrieved\", () => {\r",
							"        pm.expect(jsonData.macroData.calories).to.be.a(\"number\").that.is.at.least(0);\r",
							"    });\r",
							"}\r",
							"pm.test(\"Server responded in under 750ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).below(750);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{cookbook_url}}/api/recipe/healthInfo?recipeId={{recipe_id}}&devmode=true",
					"host": [
						"{{cookbook_url}}"
					],
					"path": [
						"api",
						"recipe",
						"healthInfo"
					],
					"query": [
						{
							"key": "recipeId",
							"value": "{{recipe_id}}"
						},
						{
							"key": "devmode",
							"value": "true"
						}
					]
				}
			},
			"response": []
		}
	]
}